function [] = preprocess(path, historical_length, future_length, number_of_agents, max_vertical_distance, extra_feature_index)
    %% Process dataset into mat file %%

    addpath(path)
    %% Inputs:
    % Locations of raw input files:
    us101_1 = fullfile(path, 'trajectories-0750am-0805am.txt');
    us101_2 = fullfile(path, 'trajectories-0805am-0820am.txt');
    us101_3 = fullfile(path, 'trajectories-0820am-0835am.txt');
    i80_1 = fullfile(path, 'trajectories-0400-0415.txt');
    i80_2 = fullfile(path, 'trajectories-0500-0515.txt');
    i80_3 = fullfile(path, 'trajectories-0515-0530.txt');

    % essential feature include:
    % 1. Dataset ID (generated by this script !NOT included in raw files!)
    % 2. Vehicle ID (row 1 in raw text files)
    % 3. Frame ID (row 2 in raw text files)
    % 4. Local X (row 5 in raw text files)
    % 5. Local Y (row 6 in raw text files)
    % 6. Lane ID (row 14 in raw text files, dropped in post-process)
    essential_feature_index = [1,2,3,6,7,15];

    % numbers in extra_feature_index represent index of rows in raw text file
    % e.g. extra_feature_index = [1,2], where 1 represents vehicle id and 2 represents frame id in raw text files
    % but DO NOT submit duplicated index and index already in essential_feature_index

    %% Fields - traj:
    % 1. Dataset ID
    % 2. Vehicle ID
    % 3. Frame ID
    % 4. Local X
    % 5. Local Y
    % 6. - 5+len(extra_feature_index). Extra features [optional]
    % 6+len(extra_feature_index). - 6+len(extra_feature_index)+number_of_agents. Adjacent vehicle IDs

    %% Fields - tracks:
    % 1. Frame ID
    % 2. Local X
    % 3. Local Y
    % 4. - 3+len(extra_feature_index). Extra features [Optional]
    % 4+len(extra_feature_index). Maneuver class id

    %% Load data and add dataset id
    disp('Loading data...')
    traj{1} = load(us101_1);    
    traj{1} = single([ones(size(traj{1},1),1),traj{1}]);
    traj{2} = load(us101_2);
    traj{2} = single([2*ones(size(traj{2},1),1),traj{2}]);
    traj{3} = load(us101_3);
    traj{3} = single([3*ones(size(traj{3},1),1),traj{3}]);
    traj{4} = load(i80_1);    
    traj{4} = single([4*ones(size(traj{4},1),1),traj{4}]);
    traj{5} = load(i80_2);
    traj{5} = single([5*ones(size(traj{5},1),1),traj{5}]);
    traj{6} = load(i80_3);
    traj{6} = single([6*ones(size(traj{6},1),1),traj{6}]);

    % DO NOT change following variables
    if ~isempty(extra_feature_index)
        extra_feature_index = extra_feature_index + 1;
    end
    feature_index = [essential_feature_index, extra_feature_index];
    number_of_features = length(extra_feature_index) + 2;
    lane_id_ind = 6;
    maneuver_ind = 7 + length(extra_feature_index);
    adjacent_ind = 8 + length(extra_feature_index);
    number_of_maneuvers = 9;
    padding_idx = -1;
    % set random seed = 42; 
    rng(42);

    for k = 1:6
        traj{k} = traj{k}(:, feature_index);
        if k <=3
            traj{k}(traj{k}(:,6)>=6,6) = 6;
        end
    end
    
    vehTrajs{1} = containers.Map;
    vehTrajs{2} = containers.Map;
    vehTrajs{3} = containers.Map;
    vehTrajs{4} = containers.Map;
    vehTrajs{5} = containers.Map;
    vehTrajs{6} = containers.Map;

    vehTimes{1} = containers.Map;
    vehTimes{2} = containers.Map;
    vehTimes{3} = containers.Map;
    vehTimes{4} = containers.Map;
    vehTimes{5} = containers.Map;
    vehTimes{6} = containers.Map;


    %% Parse fields (listed above):
    disp('Parsing fields...')

    for ii = 1:6
        vehIds = unique(traj{ii}(:,2));
        for v = 1:length(vehIds)
            vehTrajs{ii}(int2str(vehIds(v))) = traj{ii}(traj{ii}(:,2) == vehIds(v),:);
        end

        timeFrames = unique(traj{ii}(:,3));
        for v = 1:length(timeFrames)
            vehTimes{ii}(int2str(timeFrames(v))) = traj{ii}(traj{ii}(:,3) == timeFrames(v),:);
        end

        for k = 1:length(traj{ii}(:,1))
            if mod(k,10000) == 0
                fprintf('Processing dataset %d [%2.2f%%]\n', ii, k/length(traj{ii}(:,1))*100)
            end
            time = traj{ii}(k,3);
            dsId = traj{ii}(k,1);
            vehId = traj{ii}(k,2);
            vehtraj = vehTrajs{ii}(int2str(vehId));
            ind = find(vehtraj(:,3)==time);
            ind = ind(1);

            % Get lateral maneuver:
            ub = min(size(vehtraj,1),ind+future_length);
            lb = max(1, ind-historical_length);
            if vehtraj(ub,lane_id_ind)>vehtraj(ind,lane_id_ind) || vehtraj(ind,lane_id_ind)>vehtraj(lb,lane_id_ind)
                lateral = 3;
            elseif vehtraj(ub,lane_id_ind)<vehtraj(ind,lane_id_ind) || vehtraj(ind,lane_id_ind)<vehtraj(lb,lane_id_ind)
                lateral = 2;
            else
                lateral = 1;
            end
            % Get longitudinal maneuver:
            ub = min(size(vehtraj,1),ind+future_length);
            lb = max(1, ind-historical_length);
            if ub==ind || lb ==ind
                longitudinal = 1;
            else
                vHist = sqrt((vehtraj(ind,5)-vehtraj(lb,5))^2+(vehtraj(ind,4)-vehtraj(lb,4))^2)/(ind-lb);
                vFut = sqrt((vehtraj(ub,5)-vehtraj(ind,5))^2+(vehtraj(ub,4)-vehtraj(ind,4))^2)/(ub-ind);
                if vFut/vHist < 0.8
                    longitudinal = 2;
                elseif vFut/vHist > 1.25
                    longitudinal = 3;
                else
                    longitudinal = 1;
                end
            end
            % Generate maneuver class
            traj{ii}(k,maneuver_ind) = (longitudinal-1)*3 + lateral-1;

            % get adjacent vehicle ids
            frame = vehTimes{ii}(int2str(time));
            frameAdjacent = frame(abs(frame(:,5)-traj{ii}(k,5)) <= max_vertical_distance, :);
            adjID = [];
            for v = 1:size(frameAdjacent,1)
                vtraj = vehTrajs{ii}(int2str(frameAdjacent(v,2)));
                vind = find(vtraj(:,3)==time);
                if vind > historical_length && vind + future_length <= length(vtraj)
                    adjID = [adjID, frameAdjacent(v,2)];
                end
            end
            % sort adjacent vehicle ids by distance
            dist = [];
            for i = 1:length(adjID)
                vehT = vehTrajs{ii}(int2str(adjID(i)));
                vehX = vehT(vehT(:, 3) == time, 4);
                vehY = vehT(vehT(:, 3) == time, 5);
                dist = [dist, sqrt((vehX-traj{ii}(k,4))^2+(vehY-traj{ii}(k,5))^2)];
            end
            [~, dist_ind] = sort(dist);
            adjID = adjID(dist_ind);
            % remove redundant vehicles according to distance
            if length(adjID) > number_of_agents
                adjID = adjID(1:number_of_agents);
            % pad if needed
            elseif length(adjID) < number_of_agents
                adjID = [adjID, ones(1,number_of_agents-length(adjID))*padding_idx];
            end
            traj{ii}(k,adjacent_ind:adjacent_ind+number_of_agents-1) = adjID;

        end

        % remove lane id
        traj{ii}(:,lane_id_ind) = [];
        fprintf('done processing dataset %d\n', ii)
    end


    %% Filter edge cases: 
    % Since the model uses 3 sec of trajectory history for prediction, the initial 3 seconds of each trajectory is not used for training/testing
    disp('Filtering edge cases...')

    tracks = {};
    trajAll = [];
    for k = 1:6
        vehIds = unique(traj{k}(:, 2));
        for l = 1:length(vehIds)
            vehTrack = traj{k}(traj{k}(:, 2)==vehIds(l), :);
            tracks{k,vehIds(l)} = vehTrack(:, 3:4+number_of_features); % features and maneuver class id
            filtered = vehTrack(historical_length+1:end-future_length, :);
            filtered(:, maneuver_ind-1) = [];
            trajAll = [trajAll; filtered];
        end
    end


    %% Split train, validation, test
    disp('Splitting into train, validation and test sets...')

    splits = rand(1, size(trajAll, 1));
    trajTr = trajAll(splits <= 0.7, :);
    trajVal = trajAll((splits > 0.7) & (splits <= 0.8), :);
    trajTs = trajAll(0.8 < splits, :);


    %% Save mat files:
    disp('Saving mat files...')

    traj = trajTr;
    save('TrainSet5','traj','tracks','historical_length','future_length','number_of_agents','number_of_features','max_vertical_distance','padding_idx','number_of_maneuvers');

    traj = trajVal;
    save('ValSet5','traj','tracks','historical_length','future_length','number_of_agents','number_of_features','max_vertical_distance','padding_idx','number_of_maneuvers');

    traj = trajTs;
    save('TestSet5','traj','tracks','historical_length','future_length','number_of_agents','number_of_features','max_vertical_distance','padding_idx','number_of_maneuvers');

end
